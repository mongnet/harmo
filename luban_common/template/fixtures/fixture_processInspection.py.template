#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time : 2023-6-27 15:00
# @Author : hubiao
# @Email : xxx@gmail.com
# @File : fixture_processInspection.py

import jsonpath
import pytest
from luban_common import base_utils
from luban_common.base_assert import Assertions
from luban_common.global_map import Global_Map

from swagger.center.process_controller import Process
from swagger.misc.lubanMiscData import LubanMiscData
from swagger.misc.lubanMiscReport import LubanMiscReport

@pytest.fixture(scope='session')
def processInspection_init(CenterToken):
    '''
    工序报验 库模板、高级表单配置、工序、工序表单配置
    '''
    # 新建质检流程模板
    processName = "工序报验测试流程" + base_utils.generate_random_str()
    template_ins_id = Process().process_template_AddOrEdit(CenterToken, typeName=processName, remark="工序报验接口测试生成的备注_新建",
                                                           busiModule="PROINSPAPP", isbranch="no_branch_common",
                                                           userName=Global_Map.get("username"),
                                                           postId=Global_Map.get("postId"),
                                                           roleId=Global_Map.get("roleId"), sponsorType=0,
                                                           viewerType=1)

    Global_Map.set("processInspectionProcessId", template_ins_id["result"][0])
    # 新建模板库
    mName = "系统校验模板库-工序报验"
    response = LubanMiscData().pageDataTemplateUsingGET(CenterToken, pageIndex=1, keyword=mName)
    Assertions.assert_code(response, response.get("status_code"), 200)
    Assertions.assert_code(response, response.get("code")[0], 200)
    tempIds = base_utils.jpath(response["source_response"], check_key="name", check_value=mName, sub_key="id")
    if tempIds:
        processInspection_tempId = tempIds[0]
    else:
        response = LubanMiscData().saveDataTemplateUsingPOST(CenterToken, catalog=mName, major=0, name=mName,
                                                             region="四川省", type=4)
        Assertions.assert_code(response, response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("code")[0], 200)
        response = LubanMiscData().pageDataTemplateUsingGET(CenterToken, pageIndex=1, keyword=mName)
        Assertions.assert_code(response, response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("code")[0], 200)
        processInspection_tempId = base_utils.jpath(response["source_response"], check_key="name", check_value=mName, sub_key="id")[0]
    # 设置模板库id
    Global_Map.set("processInspection_tempId", processInspection_tempId)
    # 新建表单模板
    reName = "系统校验表单模板"
    response = LubanMiscData().pageDataTemplateItemUsingGET(CenterToken, templateId=processInspection_tempId, pageIndex=1)
    Assertions.assert_code(response, response.get("status_code"), 200)
    Assertions.assert_code(response, response.get("code")[0], 200)
    reportIds = base_utils.jpath(response["source_response"], check_key="name", check_value=reName, sub_key="id")
    if reportIds:
        reportId = reportIds[0]
    else:
        response = LubanMiscData().saveDataTemplateItemUsingPOST(CenterToken, isMultiInstance=0, isSelectInstance=0,
                                                                 name=reName, nodeCode="M001", nodeType=1, refType=0,
                                                                 type=13, parentId=processInspection_tempId, templateId=processInspection_tempId)
        Assertions.assert_code(response, response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("code")[0], 200)
        response = LubanMiscData().pageDataTemplateItemUsingGET(CenterToken, templateId=processInspection_tempId, pageIndex=1)
        Assertions.assert_code(response, response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("code")[0], 200)
        reportId = base_utils.jpath(response["source_response"], check_key="name", check_value=reName,
                                    sub_key="id")[0]
    # 设置模板条目id
    Global_Map.set("dataTemplateItemId", reportId)
    # 获取report url
    response = LubanMiscReport().getReportPageUrlUsingGET(CenterToken, bid=reportId, btype=0)
    Assertions.assert_code(response, response.get("status_code"), 200)
    Assertions.assert_code(response, response.get("code")[0], 200)
    reportUrl = response.get("data_url")[0]
    Assertions.assert_not_contains(reportUrl, "127.0.0.1")
    Assertions.assert_contains(reportUrl, "accessToken")
    # 获取reportToken
    for i in reportUrl.split("?")[1].split("&"):
        if i.startswith("token"):
            Global_Map.set("reportToken", i.split("=")[1])
            break
    # 获取tags
    for i in reportUrl.split("?")[1].split("&"):
        if i.startswith("tags"):
            Global_Map.set("tags", i.split("=")[1])
            break
    # 验证表单是否可访问，并获取report FORMHOST
    response = CenterToken.send_request("get", reportUrl)
    Assertions.assert_code(response, response.get("status_code"), 200)
    for line in response.get("Response_text").splitlines():
        text = line.strip()
        if text.startswith("window.__FORMHOST__"):
            Global_Map.set("report", text.split('"')[1])
            break
    Assertions.assert_not_equal_value(Global_Map.get('report'), "Null_")
    # 保存模板获取reportId
    resource = f"{Global_Map.get('report')}/rb/template/"
    payload = {
        "data": {
                "_version": 10,
                "borderSetting": {
                    "edgeColor": "#000000",
                    "edgeType": "thin"
                },
                "cell": {
                    "1": {
                        "cell_5": {
                            "id": "cell_5",
                            "outline": {
                                "bottom": "outline_7",
                                "left": "outline_7",
                                "right": "outline_7",
                                "top": "outline_7"
                            },
                            "permission": {},
                            "pos": {
                                "bottom": "tableY_4",
                                "left": "tableX_1",
                                "right": "tableX_2",
                                "top": "tableY_3"
                            },
                            "segs": [
                                {
                                    "style": {
                                        "alignH": "left",
                                        "alignV": "top",
                                        "bold": False,
                                        "color": "#000000",
                                        "family": "宋体",
                                        "italic": False,
                                        "size": 12,
                                        "underline": False
                                    },
                                    "text": ""
                                }
                            ],
                            "style": {
                                "alignH": "left",
                                "alignV": "top",
                                "bold": False,
                                "color": "#000000",
                                "family": "宋体",
                                "italic": False,
                                "size": 12,
                                "underline": False
                            },
                            "tableId": "table_8",
                            "type": "static",
                            "typeInfo": ""
                        }
                    }
                },
                "cellExtendState": {},
                "cellTypeSetting": {
                    "_version": 10,
                    "borderSetting": {
                        "edgeColor": "#000000",
                        "edgeType": "thin"
                    },
                    "cell": {
                        "1": {
                            "cell_5": {
                                "id": "cell_5",
                                "outline": {
                                    "bottom": "outline_7",
                                    "left": "outline_7",
                                    "right": "outline_7",
                                    "top": "outline_7"
                                },
                                "permission": {},
                                "pos": {
                                    "bottom": "tableY_4",
                                    "left": "tableX_1",
                                    "right": "tableX_2",
                                    "top": "tableY_3"
                                },
                                "segs": [
                                    {
                                        "style": {
                                            "alignH": "left",
                                            "alignV": "top",
                                            "bold": False,
                                            "color": "#000000",
                                            "family": "宋体",
                                            "italic": False,
                                            "size": 12,
                                            "underline": False
                                        },
                                        "text": ""
                                    }
                                ],
                                "style": {
                                    "alignH": "left",
                                    "alignV": "top",
                                    "bold": False,
                                    "color": "#000000",
                                    "family": "宋体",
                                    "italic": False,
                                    "size": 12,
                                    "underline": False
                                },
                                "tableId": "table_8",
                                "type": "static",
                                "typeInfo": ""
                            }
                        }
                    },
                    "cellExtendState": {
                        "1": {}
                    },
                    "cellTypeSetting": {},
                    "currentRole": {
                        "role": ""
                    },
                    "guaranteeState": {
                        "level": "",
                        "type": ""
                    },
                    "outline": {
                        "outline_7": {
                            "id": "outline_7"
                        }
                    },
                    "paper": {
                        "direction": "portrait",
                        "margin": {
                            "bottom": "2.54cm",
                            "left": "1.91cm",
                            "right": "1.91cm",
                            "top": "2.54cm"
                        },
                        "size": "A4"
                    },
                    "role": {
                        "nameAry": ["默认角色"]
                    },
                    "tableX": {
                        "table_8": {
                            "tableX_1": 0,
                            "tableX_2": 650
                        }
                    },
                    "tableY": {
                        "table_8": {
                            "tableY_3": 29,
                            "tableY_4": 50
                        }
                    },
                    "tags": [],
                    "text": {},
                    "totalPage": {
                        "currentPage": 1,
                        "expr": "1"
                    },
                    "variable": {},
                    "variableGraph": {
                        "exprNodeList": []
                    },
                    "zoom": {
                        "scale": 1
                    }
                },
                "currentRole": {
                    "role": ""
                },
                "guaranteeState": {
                    "evel": "",
                    "type": ""
                },
                "messageBox": {},
                "outline": {
                    "outline_7": {
                        "id": "outline_7"
                    }
                },
                "paper": {
                    "direction": "portrait",
                    "margin": {
                        "bottom": "2.54cm",
                        "left": "1.91cm",
                        "right": "1.91cm",
                        "top": "2.54cm"
                    },
                    "size": "A4"
                },
                "role": {
                    "nameAry": ["默认角色"]
                },
                "seed": 8,
                "tableX": {
                    "table_8": {
                        "tableX_1": 0,
                        "tableX_2": 650
                    }
                },
                "tableY": {
                    "table_8": {
                        "tableY_3": 29,
                        "tableY_4": 50
                    }
                },
                "tags": [],
                "text": {},
                "totalPage": {
                    "currentPage": 1,
                    "expr": "1"
                },
                "variable": {},
                "variableGraph": {},
                "zoom": {
                    "scale": 1
                }
            },
        "version": 1
    }
    response = CenterToken.send_request('post', resource, payload=payload,
                                        header={"access-token": Global_Map.get('reportToken')})
    Assertions.assert_code(response, response.get("status_code"), 200)
    Assertions.assert_code(response, response.get("code")[0], 200)
    formTemplateId = response.get("data_id")[0]
    # 高级表单模板id
    Global_Map.set("formTemplateId", formTemplateId)
    # 验证表单和模板是否绑定
    response = LubanMiscData().pageDataTemplateItemUsingGET(CenterToken, templateId=processInspection_tempId, pageIndex=1)
    Assertions.assert_code(response, response.get("status_code"), 200)
    Assertions.assert_code(response, response.get("code")[0], 200)
    formTemplateIds = base_utils.jpath(response["source_response"], check_key="id", check_value=reportId,
                                       sub_key="formTemplateId")
    Assertions.assert_in_value(formTemplateIds, formTemplateId)
    if Global_Map.get("infraDeptId"):
        # 表单库关联基建项目
        body = {'itemList': [{'dataTemplateId': Global_Map.get("processInspection_tempId"), 'dataTemplateType': 2}], 'projectId': Global_Map.get("infraDeptId"), 'projectType': 1}
        response = LubanMiscData().saveOrUpdateDataTemplateRefUsingPOST_2(CenterToken, bodyKwargs=body)
        Assertions.assert_code(response,response.get("status_code"),200)
        Assertions.assert_code(response, response.get("code")[0],200)
    if Global_Map.get("deptid"):
        # 表单库关联房建项目
        body = {'itemList': [{'dataTemplateId': Global_Map.get("processInspection_tempId"), 'dataTemplateType': 2}], 'projectId': Global_Map.get("deptid"), 'projectType': 2}
        response = LubanMiscData().saveOrUpdateDataTemplateRefUsingPOST_2(CenterToken, bodyKwargs=body)
        Assertions.assert_code(response,response.get("status_code"),200)
        Assertions.assert_code(response, response.get("code")[0],200)
    # 表单关联审批流程
    body = {'itemList': [{'itemId': Global_Map.get("dataTemplateItemId"), 'processTemplateId': Global_Map.get("processInspectionProcessId")}]}
    response = LubanMiscData().updateProjectTemplateProcessTemplateIdUsingPOST(CenterToken, bodyKwargs=body)
    Assertions.assert_code(response, response.get("status_code"), 200)
    Assertions.assert_code(response, response.get("code")[0], 200)
    Assertions.assert_equal_value(response.get("msg")[0], "Success")
    yield
    # 是否清理生成的数据
    if Global_Map.get("is_clear"):
        response = LubanMiscData().deleteDataTemplateItemUsingPOST(CenterToken, templateId=processInspection_tempId, ids=[reportId])
        Assertions.assert_code(response, response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("code")[0], 200)
        response = Process().process_template_del(CenterToken, templateId =Global_Map.get("processInspectionProcessId"))
        Assertions.assert_code(response, response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("code")[0], 200)