#!/usr/bin/python3
# -*- coding: utf-8 -*-
# @Time : 2023-2-1 10:14
# @Author : hubiao
# @Email : xxx@gmail.com
# @File : fixture_init.py
import time

import jsonpath
import pytest
from luban_common import base_utils
from luban_common.base_assert import Assertions
from luban_common.global_map import Global_Map

from swagger.acl.acl_module import AclModule
from swagger.acl.acl_role import AclRole
from swagger.ent_admin_org.ent_admin_org_cmp_org import EntAdminOrgCmpOrg
from swagger.ent_admin_org.ent_admin_org_project import EntAdminOrgProject
from swagger.ent_admin_org.ent_admin_org_section import EntAdminOrgSection
from swagger.ent_admin_org.ent_admin_org_supplier import EntAdminOrgSupplier
from swagger.ent_admin_user.ent_admin_user_admin_user import EntAdminUserAdminUser
from swagger.ent_admin_user.ent_admin_user_post import EntAdminUserPost
from swagger.ent_admin_user.ent_admin_user_user import EntAdminUserUser


@pytest.fixture(scope="session",autouse=True)
def initialize(token,env_conf):
    '''
    数据初始化
    :return:
    '''
    # 获取企业组织节点
    try:
        org_response = EntAdminOrgCmpOrg().cmp_org_all_node_list_get(token, onlyCmp=None, query_kwargs={'onlyCmp': 'false'})
        Assertions.assert_code(org_response, org_response.get("status_code"), 200)
        Assertions.assert_code(org_response, org_response.get("code")[0], 200)
        org_list = jsonpath.jsonpath(org_response.get("source_response"), "$..[?(@.nodeType=='ENT')]..id")
        if org_list:
            ent_node_id = org_list[0]
            Global_Map.set('ent_node_id', ent_node_id)
        else:
            raise Exception("未找到企业组织节点")
        # 新建企业组织节点
        org_list = jsonpath.jsonpath(org_response.get("source_response"), "$..[?(@.nodeType=='CMP')]")
        org_name = '冒烟测试用公司组织节点'
        if org_list:
            for org in org_list:
                # 如果存在，则复用
                if org_name == org.get('name'):
                    Global_Map.set('cmp_node_id', org.get('id'))
        if not Global_Map.get('cmp_node_id'):
            response = EntAdminOrgCmpOrg().cmp_org_create_node_post(token, name=org_name, parentId=Global_Map.get('ent_node_id'), nodeType="CMP")
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("data")[0])
            Global_Map.set('cmp_node_id', response.get("data")[0])
            org_response = EntAdminOrgCmpOrg().cmp_org_all_node_list_get(token, onlyCmp=None, query_kwargs={'onlyCmp': 'false'})
            Assertions.assert_code(org_response, org_response.get("status_code"), 200)
            Assertions.assert_code(org_response, org_response.get("code")[0], 200)
            Assertions.assert_in_value(jsonpath.jsonpath(org_response.get("source_response"), "$..[?(@.nodeType=='CMP')]..name"), org_name)
        # 新建供应商
        supplier_response = EntAdminOrgSupplier().supplier_supplier_list_post(token, cmpIds=[Global_Map.get('cmp_node_id')], pageNum=1, pageSize=50)
        Assertions.assert_code(supplier_response, supplier_response.get("status_code"), 200)
        Assertions.assert_code(supplier_response, supplier_response.get("code")[0], 200)
        supplier_list = jsonpath.jsonpath(supplier_response.get("source_response"), "$..items[?(@.name)]")
        supplier_name = '冒烟测试用供应商'
        if supplier_list:
            for supplier in supplier_list:
                # 如果存在，则复用
                if supplier_name == supplier.get('name'):
                    Global_Map.set('supplier_node_id', supplier.get('id'))
        if not Global_Map.get('supplier_node_id'):
            response = EntAdminOrgSupplier().supplier_post(token, cmpIdList=[Global_Map.get('cmp_node_id')], name=supplier_name, mobile="13916829124", contactPerson="测试人", legalRepresentative="测试法人代表", unifiedSocialCreditCode="统一使用代码", unitType="GYSB")
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("data")[0])
            Global_Map.set('supplier_node_id', response.get("data")[0])
            supplier_response = EntAdminOrgSupplier().supplier_supplier_list_post(token, cmpIds=[Global_Map.get('cmp_node_id')], pageNum=1, pageSize=50)
            Assertions.assert_code(supplier_response, supplier_response.get("status_code"), 200)
            Assertions.assert_code(supplier_response, supplier_response.get("code")[0], 200)
            Assertions.assert_in_value(jsonpath.jsonpath(supplier_response.get("source_response"), "$..items[?(@.name)].name"), supplier_name)
        # 新建项目
        proj_response = EntAdminOrgProject().project_proj_list_post(token, body_kwargs = {"cmpId":Global_Map.get('cmp_node_id'),"pageNum":1,"pageSize":20})
        Assertions.assert_code(proj_response, proj_response.get("status_code"), 200)
        Assertions.assert_code(proj_response, proj_response.get("code")[0], 200)
        proj_list = jsonpath.jsonpath(proj_response.get("source_response"), "$..items[?(@.name)]")
        proj_name = '冒烟测试用项目节点'
        if proj_list:
            for proj in proj_list:
                # 如果存在，则复用
                if proj_name == proj.get('name'):
                    Global_Map.set('proj_node_id', proj.get('id'))
        if not Global_Map.get('proj_node_id'):
            response = EntAdminOrgProject().project_create_proj_post(token, name=proj_name, cmpOrgId=Global_Map.get('cmp_node_id'), builderContactName="测试人", builderContactPhone="13916829124", shortName="测试项目简称", status="ZJ", nature="XJ", haveSection=True,type="JIJIAN",code="项目编号XD",approvalType="HZ")
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("data")[0])
            Global_Map.set('proj_node_id', response.get("data")[0])
            proj_response = EntAdminOrgProject().project_proj_list_post(token, body_kwargs = {"cmpId":Global_Map.get('cmp_node_id'),"pageNum":1,"pageSize":20})
            Assertions.assert_code(proj_response, proj_response.get("status_code"), 200)
            Assertions.assert_code(proj_response, proj_response.get("code")[0], 200)
            Assertions.assert_in_value(jsonpath.jsonpath(proj_response.get("source_response"), "$..items[?(@.name)]..name"), proj_name)
        # 新建标段
        section_response = EntAdminOrgSection().section_section_list_post(token, body_kwargs = {"projectId":Global_Map.get('proj_node_id'),"pageNum":1,"pageSize":20})
        Assertions.assert_code(section_response, section_response.get("status_code"), 200)
        Assertions.assert_code(section_response, section_response.get("code")[0], 200)
        section_list = jsonpath.jsonpath(section_response.get("source_response"), "$..items[?(@.name)]")
        section_name = '冒烟测试用标段节点'
        if section_list:
            for section in section_list:
                # 如果存在，则复用
                if section_name == section.get('name'):
                    Global_Map.set('section_node_id', section.get('id'))
        if not Global_Map.get('section_node_id'):
            response = EntAdminOrgSection().section_create_section_post(token, name=section_name, projectId=Global_Map.get('proj_node_id'), shortName="测试标段简称", contactName="测试人", contactPhone="13916829124", baseBidBudget=100000, contractAmount=100000, contractCode="测试合同编号", startDate="2022-01-01", endDate="2022-01-01",type="SG",code="A001",supplierId=Global_Map.get('supplier_node_id'))
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("data")[0])
            Global_Map.set('section_node_id', response.get("data")[0])
            section_response = EntAdminOrgSection().section_section_list_post(token, body_kwargs = {"projectId":Global_Map.get('proj_node_id'),"pageNum":1,"pageSize":20})
            Assertions.assert_code(section_response, section_response.get("status_code"), 200)
            Assertions.assert_code(section_response, section_response.get("code")[0], 200)
            Assertions.assert_in_value(jsonpath.jsonpath(section_response.get("source_response"), "$..items[?(@.name)]..name"), section_name)
        # 新建角色
        role_response = AclRole().role_list_post(token, body_kwargs = {"pageNum":1,"pageSize":20})
        Assertions.assert_code(role_response, role_response.get("status_code"), 200)
        Assertions.assert_code(role_response, role_response.get("code")[0], 200)
        role_list = jsonpath.jsonpath(role_response.get("source_response"), "$..items[?(@.roleName)]")
        role_name = '冒烟测试用角色'
        if role_list:
            for role in role_list:
                # 如果存在，则复用
                if role_name == role.get('roleName'):
                    Global_Map.set('role_id', role.get('id'))
        if not Global_Map.get('role_id'):
            response = AclRole().role_createOrUpdate_post(token, roleName=role_name)
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("source_response").get("data").get("id"))
            Global_Map.set('role_id', response.get("source_response").get("data").get("id"))
        # 角色功能授权
        menu_response = AclModule().module_menu_list_post(token, roleId=Global_Map.get('role_id'))
        Assertions.assert_code(menu_response, menu_response.get("status_code"), 200)
        Assertions.assert_code(menu_response, menu_response.get("code")[0], 200)
        menu_list = jsonpath.jsonpath(menu_response.get("source_response"), "$..sysMenuTypes[?(@.parentId!=-1)]..id")
        if menu_list:
            bind_response = AclModule().module_menu_bind_post(token, roleId=Global_Map.get('role_id'), sysModuleId="10000001", linkageSwitch=1, hasSelectedMenuIds=menu_list)
            Assertions.assert_code(bind_response, bind_response.get("status_code"), 200)
            Assertions.assert_code(bind_response, bind_response.get("code")[0], 200)
        else:
            raise Exception("未获取到功能菜单列表")
        role_response = AclRole().role_list_post(token, body_kwargs = {"pageNum":1,"pageSize":20})
        Assertions.assert_code(role_response, role_response.get("status_code"), 200)
        Assertions.assert_code(role_response, role_response.get("code")[0], 200)
        Assertions.assert_in_value(jsonpath.jsonpath(role_response.get("source_response"), "$..items[?(@.roleName)]..roleName"), role_name)
        menu_response = AclModule().module_menu_list_post(token, roleId=Global_Map.get('role_id'))
        Assertions.assert_code(menu_response, menu_response.get("status_code"), 200)
        Assertions.assert_code(menu_response, menu_response.get("code")[0], 200)
        Assertions.assert_dictOrList_eq(jsonpath.jsonpath(menu_response.get("source_response"), "$..sysMenuTypes[?(@.parentId!=-1)]..id"), menu_list)
        # 新建职务
        post_response = EntAdminUserPost().post_listAll_get(token)
        Assertions.assert_code(post_response, post_response.get("status_code"), 200)
        Assertions.assert_code(post_response, post_response.get("code")[0], 200)
        post_list = jsonpath.jsonpath(post_response.get("source_response"), "$..data[?(@.id)]")
        post_name = '冒烟测试用职务'
        if post_list:
            for post in post_list:
                # 如果存在，则复用
                if post_name == post.get('postName'):
                    Global_Map.set('post_id', post.get('id'))
        if not Global_Map.get('post_id'):
            response = EntAdminUserPost().post_createOrUpdate_post(token, postName=post_name, memo="冒烟测试用职务", roleIds=[Global_Map.get('role_id')])
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("source_response").get("data").get("id"))
            Global_Map.set('post_id', response.get("source_response").get("data").get("id"))
            proj_response = EntAdminUserPost().post_listAll_get(token)
            Assertions.assert_code(proj_response, proj_response.get("status_code"), 200)
            Assertions.assert_code(proj_response, proj_response.get("code")[0], 200)
            Assertions.assert_in_value(jsonpath.jsonpath(proj_response.get("source_response"), "$..data[?(@.id)]..postName"), post_name)
        # 新建用户
        user_response = EntAdminUserAdminUser().admin_user_post(token, pageSize=5000, pageNum=1, type=0, orgIds=[Global_Map.get('ent_node_id')])
        Assertions.assert_code(user_response, user_response.get("status_code"), 200)
        Assertions.assert_code(user_response, user_response.get("code")[0], 200)
        user_list = jsonpath.jsonpath(user_response.get("source_response"), f"$..items[?(@.username=='{Global_Map.get('front').get('username')}')]")
        user_name = Global_Map.get('front').get('username')
        real_name = Global_Map.get('front').get('realname')
        if user_list:
            for user in user_list:
                # 如果存在，则复用
                if user_name == user.get('username'):
                    Global_Map.set('user_id', user.get('id'))
        if not Global_Map.get('user_id'):
            response = EntAdminUserAdminUser().admin_user_add_user_post(token)
            Assertions.assert_code(response, response.get("status_code"), 200)
            Assertions.assert_code(response, response.get("code")[0], 200)
            Assertions.assert_isNotEmpty(response.get("source_response").get("data").get("id"))
            Global_Map.set('username', response.get("source_response").get("data").get("id"))
            proj_response = EntAdminUserAdminUser().admin_user_post(token, pageSize=5000, pageNum=1, type=0, orgIds=[Global_Map.get('ent_node_id')])
            Assertions.assert_code(proj_response, proj_response.get("status_code"), 200)
            Assertions.assert_code(proj_response, proj_response.get("code")[0], 200)
            Assertions.assert_in_value(jsonpath.jsonpath(proj_response.get("source_response"), "$..items[?(@.id)]..username"), post_name)
        user_response = EntAdminUserAdminUser().admin_user_id_put(token, id=Global_Map.get('user_id'),email=base_utils.generate_random_mail(), mobile=base_utils.generate_random_mobile(), realName=real_name, username=Global_Map.get('front').get('username'), postId=Global_Map.get('post_id'), type=0, orgId=Global_Map.get('cmp_node_id'), roleIds=[Global_Map.get('role_id')])
        Assertions.assert_code(user_response, user_response.get("status_code"), 200)
        Assertions.assert_code(user_response, user_response.get("code")[0], 200)
        user_response = EntAdminUserUser().user_project_section_post(token, linkageSwitch=1, authorizedProjIds=[Global_Map.get('proj_node_id')], userIds=[Global_Map.get('user_id')], authorizedSectionIds=[Global_Map.get('section_node_id')])
        Assertions.assert_code(user_response, user_response.get("status_code"), 200)
        Assertions.assert_code(user_response, user_response.get("code")[0], 200)
        # 新建流程模板
        # 新建字典
        yield
    # 确保清理代码一定执行
    finally:
        # 数据清理
        # 删除字典
        # 删除流程模板
        # 删除用户
        if Global_Map.get('user_id'):
            # 清除用户的 角色/职务/邮箱 绑定
            EntAdminUserAdminUser().admin_user_id_put(token, id=Global_Map.get('user_id'), mobile=base_utils.generate_random_mobile(), realName=real_name, username=Global_Map.get('front').get('username'), type=0, orgId=Global_Map.get('cmp_node_id'))
            # 清除用户的 标段/项目 绑定
            EntAdminUserUser().user_project_section_post(token, linkageSwitch=1, userIds=[Global_Map.get('user_id')], authorizedProjIds=[], authorizedSectionIds=[])
        # 删除角色
        if Global_Map.get('role_id'):
            AclRole().role_delete_post(token, ids=[Global_Map.get('role_id')])
        # 删除职务
        if Global_Map.get('post_id'):
            EntAdminUserPost().post_delete_get(token, ids=[Global_Map.get('post_id')])
        # 删除标段
        if Global_Map.get('section_node_id'):
            EntAdminOrgSection().section_delete_section_post(token, sectionIds=[Global_Map.get('section_node_id')])
        # 删除项目
        if Global_Map.get('proj_node_id'):
            EntAdminOrgProject().project_delete_proj_post(token, ids=[Global_Map.get('proj_node_id')])
        # 删除供应商
        if Global_Map.get('supplier_node_id'):
            EntAdminOrgSupplier().supplier_delete_supplier_post(token, ids=[Global_Map.get('supplier_node_id')])
        # 删除企业组织节点
        if Global_Map.get('cmp_node_id'):
            EntAdminOrgCmpOrg().cmp_org_delete_node_post(token, id=Global_Map.get('cmp_node_id'))

def pytest_sessionfinish(session):
    """
    :param session:
    :return:
    """
    print(session)