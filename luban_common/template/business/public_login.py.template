#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @TIME    : 2019/1/2 11:19
# @Author  : hubiao
# @File    : public_login.py
import json
import re

import pytest
import xmltodict

from urllib.parse import quote
from luban_common import base_utils
from luban_common import http_requests
from luban_common.base_assert import Assertions
from luban_common.global_map import Global_Map


class BimAdmin:
    '''
    BimAdmin 登录类
    '''
    def __init__(self):
        self.header = Global_Map.get("headers").get("urlencoded_header")
        self.body = Global_Map.get("sysadmin").get("logininfo")
        self.BimAdminLogin = http_requests.HttpRequests(Global_Map.get("sysadmin").get("host"))

    def login(self):
        '''
        后台登录
        :param BimAadminLogin:
        :return:
        '''
        resource = "/login.htm"
        response = self.BimAdminLogin.send_request("post", resource, self.body, self.header)
        Assertions.assert_code(response,response.get("status_code"), 200)
        return self.BimAdminLogin

class Center:
    '''
    Center CAS登录类
    '''
    def __init__(self,centerusername,centerpassword):
        self.productId = Global_Map.get("productId").get("center")
        self.username = centerusername if isinstance(centerusername,int) else quote(centerusername)
        self.password = centerpassword
        self.header = Global_Map.get("headers").get("plain_header")
        self.CenterLogin = http_requests.HttpRequests(Global_Map.get("pds"))

    def getServerUrl(self):
        '''
        获取服务器地址信息
        '''
        resource = "/rs/centerLogin/serverurl"
        response = self.CenterLogin.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        assert len(response.get("serverURL")) != 0
        for server in response.get("serverURL"):
            number = response.get("serverURL").index(server)
            Global_Map.set(response.get("serverName")[number],response.get("serverURL")[number])

    def getDeployType(self):
        '''
        获取部署类型
        :return:
        '''
        resource = "/rs/centerLogin/deployType"
        response = self.CenterLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        deployType = response.get("Response_text")
        Global_Map.set("deployType", deployType)

    def getLT(self):
        '''
        获取LT
        :return:
        '''
        resource = "/login"
        response = self.CenterLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        html = response.get("Response_text")
        pattern = 'value="LT(.+?)" />'
        lt = re.findall(pattern, html)[0]
        return lt

    def getTGC(self):
        '''
        获取TGC，依赖getLT接口
        :return:
        '''
        resource = "/login"
        body = f'_eventId=submit&execution=e1s1&lt=LT{self.getLT()}&password={self.password}&productId={self.productId}&submit=%25E7%2599%25BB%25E5%25BD%2595&username={self.username}'
        response = self.CenterLogin.send_request("post", resource, body, self.header)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def getCompanyList(self):
        '''
        获取企业id列表
        :return:
        '''
        resource = "/rs/centerLogin/companyList"
        body = {"password": self.password,"username": self.username}
        response = self.CenterLogin.send_request("post", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        if len(response.get("epid")) > 0:
            Global_Map.set("CenterEpid",response.get("epid")[0])

    def switchCompany(self):
        '''
        切换到指定企业，依赖getCompanyList接口
        :return:
        '''
        resource = "/rs/centerLogin/login"
        body = {"epid":Global_Map.get("CenterEpid"),"password": self.password,"username": self.username}
        response = self.CenterLogin.send_request("post", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def login(self):
        '''
        Center登录
        :return:
        '''
        # 判断用户是否有套餐权限
        product = [key for key, value in Global_Map.get("productId").items() if value == self.productId]
        if set(product) <= set(Global_Map.get("Package")):
            pass
        elif Global_Map.get("noPackage") and set(product) <= set(Global_Map.get("Package")):
            pytest.fail(f"{product} 产品套餐已无可用授权数量，用例无法执行，请释放套餐授权后重试")
        else:
            pytest.skip(f"未购买 {product} 产品套餐，用例不用执行")
        self.getServerUrl()
        self.getDeployType()
        self.getTGC()
        self.getCompanyList()
        self.switchCompany()

class IworksApp:
    '''
    BV CAS登录类
    '''
    def __init__(self,username,password):
        self.productId = Global_Map.get("productId").get("iworksApp")
        self.username = username if isinstance(username,int) else quote(username)
        self.password = password
        self.header = Global_Map.get("headers").get("plain_header")
        self.clientVersion = Global_Map.get("iworksApp").get("clientVersion")
        self.casLogin = http_requests.HttpRequests(Global_Map.get("pds"))
        self.epid = ''

    def getServerUrl(self):
        '''
        获取服务器地址信息
        '''
        resource = '/rs/casLogin/serverUrl'
        response = self.casLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        assert len(response.get("serverURL")) != 0
        for server in response.get("serverURL"):
            number = response.get("serverURL").index(server)
            Global_Map.set(response.get("serverName")[number],response.get("serverURL")[number])

    def getLT(self):
        '''
        获取LT
        :return:
        '''
        resource = '/login'
        response = self.casLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        html = response.get("Response_text")
        pattern = 'value="LT(.+?)" />'
        lt = re.findall(pattern, html)[0]
        return lt

    def getTGC(self):
        '''
        获取TGC，依赖getLT接口
        :return:
        '''
        resource = '/login'#?service=+serverlist[6]["serverURL"].replace("://","%3A%2F%2F")
        body = f'_eventId=submit&execution=e1s1&lt=LT{self.getLT()}&password={self.password}&productId={self.productId}&submit=%25E7%2599%25BB%25E5%25BD%2595&username={self.username}'
        response = self.casLogin.send_request("post", resource, body, self.header)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def getCompanyList(self):
        '''
        获取企业id列表
        :return:
        '''
        resource = "/rs/casLogin/companyList"
        body = {"password": self.password,"userName": self.username, "clientVersion": self.clientVersion,
         "phoneModel": "国行(A1865)、日行(A1902)iPhone X", "platform": "ios", "innetIp": "192.168.7.184", "productId": self.productId,
         "token": "f54d6c8c13445a723a2863a72d460e5aec48010560ea2351bda6474de5164899", "systemVersion": "13.5.1",
         "hardwareCodes": "3465192946d57f13482640578c77ffa77d1f66a4"}
        response = self.casLogin.send_request("post", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        if len(response.get("enterpriseId")) > 0:
            Global_Map.set("iworksAppEpid", response.get("enterpriseId")[0])
            self.epid = response.get("enterpriseId")[0]
            return self.epid

    def switchCompany(self):
        '''
        切换到指定企业
        :return:
        '''
        resource = f"/rs/casLogin/changeEnterprise/{self.epid}"
        response = self.casLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def login(self):
        '''
        登录BV CAS流程方法
        :return:
        '''
        self.getServerUrl()
        self.getTGC()
        self.getCompanyList()
        self.switchCompany()

class appToken:
    '''
    apptoken登录类
    '''
    def __init__(self,username,password,productId):
        self.productId = productId
        self.username = username
        self.password = password
        self.header = Global_Map.get("headers").get("json_header")
        self.Login = http_requests.HttpRequests(Global_Map.get('base_url'))
        self.epid = ""
        self.token = ""

    def getToken(self):
        '''
        获取token接口
        '''
        resource = "/auth-server/auth/token"
        body = {"loginType": "192","password": self.password,"username": self.username}
        response = self.Login.send_request('post', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        if len(response.get("data")) > 0:
            self.token = response.get("data")[0]
            Global_Map.set("token", response.get("data")[0])
        # 验证token中账号是否正确
        userinfo = json.loads(base_utils.FromBase64(self.token.split(".")[1]))
        Assertions.assert_in_value(userinfo,self.username)

    def getCompanyList(self):
        '''
        获取企业id列表
        :return:
        '''
        resource = "/rs/casLogin/companyList"
        body = {"password": self.password,"userName": self.username, "clientVersion": self.clientVersion,
         "phoneModel": "国行(A1865)、日行(A1902)iPhone X", "platform": "ios", "innetIp": "192.168.7.184", "productId": self.productId,
         "token": "f54d6c8c13445a723a2863a72d460e5aec48010560ea2351bda6474de5164899", "systemVersion": "13.5.1",
         "hardwareCodes": "3465192946d57f13482640578c77ffa77d1f66a4"}
        response = self.Login.send_request('post', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        if len(response.get("enterpriseId")) > 0:
            self.epid = response.get("enterpriseId")[0]
            return self.epid

    def enterprise(self):
        '''
        切换企业
        '''
        resource = f"/auth-server/auth/enterprise"
        body = {"epid": self.epid}
        response = self.Login.send_request('put', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def logout(self):
        '''
        退出登录接口
        '''
        resource = "/auth-server/auth/logout"
        response = self.Login.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def login(self):
        # 判断用户是否有套餐权限
        product = [key for key, value in Global_Map.get("productId").items() if value == self.productId]
        if set(product) <= set(Global_Map.get("Package")):
            pass
        elif Global_Map.get("noPackage") and set(product) <= set(Global_Map.get("Package")):
            pytest.fail(f"{product} 产品套餐已无可用授权数量，用例无法执行，请释放套餐授权后重试")
        else:
            pytest.skip(f"未购买 {product} 产品套餐，用例不用执行")
        self.getToken()
        self.getCompanyList()
        self.enterprise()
        return self.Login

class Iworks:
    '''
    iWorks CAS登录类
    '''
    def __init__(self,username,password,productId):
        self.productId = productId
        self.username = username if isinstance(username,int) else quote(username)
        self.password = password
        self.header =Global_Map.get("headers").get("soap_header")
        self.header1 = Global_Map.get("headers").get("urlencoded_header")
        self.casLogin = http_requests.HttpRequests(Global_Map.get('pds'))
        self.epid = ""

    def getServerUrl(self):
        '''
        获取服务器地址信息
        '''
        resource ='/webservice/lbws/casLoginService'
        body = '''<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SASS="http://login.webservice.login.sso.lubansoft.com/">
    <SOAP-ENV:Body>
        <SASS:getServUrl/>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''
        response = self.casLogin.send_request('post', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        convertedXml = xmltodict.parse(response.get('Response_text'))
        Response_serverURL= base_utils.ResponseData(convertedXml)['soap:Envelope_soap:Body_ns2:getServUrlResponse_return_list'][0]
        assert len(Response_serverURL)!=0,"serverURL不能为空"
        for server in Response_serverURL:
            Global_Map.set(dict(server).get("serverName"),dict(server).get("serverURL"))

    def getLT(self):
        '''
        获取LT
        :return:
        '''
        resource = '/login'
        response = self.casLogin.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        html = response.get("Response_text")
        pattern = 'value="LT(.+?)" />'
        lt = re.findall(pattern, html)[0]
        return lt

    def getTGC(self):
        '''
        获取TGC，依赖getLT接口
        :return:
        '''
        resource = '/login'#?service=+serverlist[6]["serverURL"].replace("://","%3A%2F%2F")
        body = f'_eventId=submit&execution=e1s1&lt=LT{self.getLT()}&password={self.password}&productId={self.productId}&submit=%25E7%2599%25BB%25E5%25BD%2595&username={self.username}'
        response = self.casLogin.send_request('post', resource, body, self.header1)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def getCompanyList(self):
        '''
        获取企业id列表
        :return:
        '''
        resource = "/webservice/lbws/casLoginService"
        body = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:log="http://login.webservice.login.sso.lubansoft.com/">
    <soapenv:Header/>
    <soapenv:Body>
        <log:getCompanyList/>
    </soapenv:Body>
</soapenv:Envelope>'''
        response = self.casLogin.send_request('post', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        convertedXml = xmltodict.parse(response.get('Response_text'))
        enterpriseId = base_utils.ResponseData(convertedXml)['soap:Envelope_soap:Body_ns2:getCompanyListResponse_return_enterpriseId']
        if len(enterpriseId) > 0:
            epids = eval(json.dumps(enterpriseId))[0]
            Global_Map.set("epid", epids)
            self.epid = epids
            return self.epid

    def switchCompany(self):
        '''
        切换到指定企业
        :return:
        '''
        resource = f"/rs/casLogin/changeEnterprise/{self.epid}"
        response = self.casLogin.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def casLoginService(self):
        '''
        登录获取权限码（cas）casLogin(登录cas)
        :return:
        '''
        resource = "/webservice/lbws/casLoginService"
        body = f'''
       <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:log="http://login.webservice.login.sso.lubansoft.com/">
    <soapenv:Header/>
    <soapenv:Body>
        <log:casLogin>
            <!--Optional:-->
            <param>
                <!--Optional:-->
                <!--Optional:-->
                <epid>{self.epid}</epid>
                <!--Optional:-->
                <hardwareCodes>eb4af7830e478a6191b38f7687a81e81-f6d5e226a50d8a7ff4cd47252efaa128</hardwareCodes>
                <!--Optional:-->
                <!--Optional:-->
                <innetIp>172.16.21.147</innetIp>
                <platform>pc64</platform>
                <version>1.0.0</version>
            </param>
        </log:casLogin>
    </soapenv:Body>
</soapenv:Envelope>
'''
        response = self.casLogin.send_request('post', resource, body, self.header)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def login(self):
        '''
        登录BV CAS流程方法
        :return:
        '''
        # 判断用户是否有套餐权限
        product = [key for key, value in Global_Map.get("productId").items() if value == self.productId]
        if set(product) <= set(Global_Map.get("Package")):
            pass
        elif Global_Map.get("noPackage") and set(product) <= set(Global_Map.get("Package")):
            pytest.fail(f"{product} 产品套餐已无可用授权数量，用例无法执行，请释放套餐授权后重试")
        else:
            pytest.skip(f"未购买 {product} 产品套餐，用例不用执行")
        self.getServerUrl()
        self.getTGC()
        self.getCompanyList()
        self.casLoginService()

class WebToken:
    '''
    webtoken登录类，工程管理数字化平台使用
    '''
    def __init__(self,username,password,productId):
        self.productId = productId
        self.username = username
        self.password = password
        self.header = Global_Map.get("headers").get("json_header")
        self.Login = http_requests.HttpRequests(Global_Map.get('base_url'))
        self.epid = ""
        self.token = ""

    def getToken(self):
        '''
        获取token接口
        '''
        resource = "/auth-server/auth/token"
        body = {"loginType": "192","password": self.password,"username": self.username}
        response = self.Login.send_request('post', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        if len(response.get("data")) > 0:
            self.token = response.get("data")[0]
            Global_Map.set("token", response.get("data")[0])
        # 验证token中账号是否正确
        userinfo = json.loads(base_utils.FromBase64(self.token.split(".")[1]))
        Assertions.assert_in_value(userinfo,self.username)

    def getEnterprises(self):
        '''
        获取企业列表
        '''
        resource = f"/auth-server/auth/enterprises"
        response = self.Login.send_request('get', resource, header={"access-token":self.token}, flush_header=True)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        if len(response.get("data_epid")) > 0:
            self.epid = response.get("data_epid")[0]
            Global_Map.set("epid", response.get("data_epid")[0])
            Global_Map.set("enterpriseName", response.get("data_enterpriseName")[0])

    def enterprise(self):
        '''
        切换企业
        '''
        resource = f"/auth-server/auth/enterprise"
        body = {"epid": self.epid}
        response = self.Login.send_request('put', resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def client(self):
        '''
        获取产品权限
        '''
        resource = f"/auth-server/auth/client"
        response = self.Login.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        Assertions.assert_in_value(response.get("data_productId"),192)

    def authgroup(self):
        '''
        并登录产品，获取权限码
        '''
        resource = f"/auth-server/auth/authgroup/192"
        response = self.Login.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def clientModule(self):
        '''
        获取模块权限
        '''
        resource = f"/auth-server/auth/clientModule"
        response = self.Login.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        Assertions.assert_in_key(response.get("source_response"), "productId")

    def logout(self):
        '''
        退出登录接口
        '''
        resource = "/auth-server/auth/logout"
        response = self.Login.send_request('get', resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def login(self):
        # 判断用户是否有套餐权限
        product = [key for key, value in Global_Map.get("productId").items() if value == self.productId]
        if set(product) <= set(Global_Map.get("Package")):
            pass
        elif Global_Map.get("noPackage") and set(product) <= set(Global_Map.get("Package")):
            pytest.fail(f"{product} 产品套餐已无可用授权数量，用例无法执行，请释放套餐授权后重试")
        else:
            pytest.skip(f"未购买 {product} 产品套餐，用例不用执行")
        self.getToken()
        self.getEnterprises()
        self.enterprise()
        self.client()
        self.authgroup()
        self.clientModule()
        return self.Login

class Token:
    '''
    通用token登录类，所有标准版本token登录可使用这个类来登录
    '''
    def __init__(self,username,password,productId,loginType="CENTER_WEB"):
        self.productId = productId
        self.username = username
        self.password = password
        self.header = Global_Map.get("headers").get("json_header")
        self.Login = http_requests.HttpRequests(Global_Map.get("base_url"))
        self.epid = ""
        self.token = ""
        self.loginType = loginType

    def getServerUrl(self):
        '''
        获取服务器地址信息
        '''
        if not Global_Map.get("pds"):
            assert False,"pds地址未配置"
        resource = f'{Global_Map.get("pds")}/rs/casLogin/serverUrl'
        response = self.Login.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        assert len(response.get("serverURL")) != 0
        for server in response.get("serverURL"):
            number = response.get("serverURL").index(server)
            Global_Map.set(response.get("serverName")[number],response.get("serverURL")[number])

    def getToken(self):
        '''
        获取token接口
        '''
        resource = "/auth-server/auth/token"
        body = {"loginType": self.loginType,"password": self.password,"username": self.username}
        response = self.Login.send_request("post", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        if len(response.get("data")) > 0:
            self.token = response.get("data")[0]
            Global_Map.set("token", response.get("data")[0])
        # 验证token中账号是否正确
        userinfo = json.loads(base_utils.FromBase64(self.token.split(".")[1]))
        Assertions.assert_in_value(userinfo,str(self.username))

    def getAuthEnterprises(self):
        '''
        获取有对应客户端权限的企业列表
        '''
        resource = f"/auth-server/auth/enterprises/productId/{self.productId}"
        response = self.Login.send_request("get", resource, header={"access-token":self.token}, flush_header=True)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        if len(response.get("data_epid")) > 0:
            self.epid = response.get("data_epid")[0]
            Global_Map.set("epid", response.get("data_epid")[0])
            Global_Map.set("enterpriseName", response.get("data_enterpriseName")[0])

    def getEnterprises(self):
        '''
        获取企业列表
        '''
        resource = f"/auth-server/auth/enterprises"
        response = self.Login.send_request("get", resource, header={"access-token":self.token}, flush_header=True)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        if len(response.get("data_epid")) > 0:
            self.epid = response.get("data_epid")[0]
            Global_Map.set("epid", response.get("data_epid")[0])
            Global_Map.set("enterpriseName", response.get("data_enterpriseName")[0])

    def enterprise(self):
        '''
        切换企业
        '''
        resource = f"/auth-server/auth/enterprise"
        body = {"epid": self.epid}
        response = self.Login.send_request("put", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def authgroup(self):
        '''
        获取授权
        '''
        resource = f"/auth-server/auth/authgroup/{self.productId}"
        response = self.Login.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def client(self):
        '''
        获取产品权限
        '''
        resource = f"/auth-server/auth/client"
        response = self.Login.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        Assertions.assert_in_value(response.get("data_productId"),192)

    def clientModule(self):
        '''
        获取模块权限
        '''
        resource = f"/auth-server/auth/clientModule"
        response = self.Login.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        Assertions.assert_in_key(response.get("source_response"), "productId")

    def logout(self):
        '''
        退出登录接口
        '''
        resource = "/auth-server/auth/logout"
        response = self.Login.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)

    def login(self):
        # 如 difference_marker 为空就不执行登录相关接口
        if Global_Map.get("difference_marker"):
            # 判断用户是否有套餐权限
            product = [key for key, value in Global_Map.get("productId").items() if value == self.productId]
            if self.loginType == "CENTER_WEB" or set(product) <= set(Global_Map.get("Package")):
                pass
            elif Global_Map.get("noPackage") and set(product) <= set(Global_Map.get("Package")):
                pytest.fail(f"{product} 产品套餐已无可用授权数量，用例无法执行，请释放套餐授权后重试")
            else:
                pytest.skip(f"未购买 {product} 产品套餐，用例不用执行")
            # 老客户端，使用soap的接口登录，需要调用
            if self.productId in [33,45,86,92,93,192]:
                self.getServerUrl()
            self.getToken()
            # 数字平台获取企业列表不用判断是否有客户端权限
            if self.productId in [192]:
                self.getEnterprises()
            else:
                self.getAuthEnterprises()
            self.enterprise()
            # center登录不能调用这个接口，不然会提示没有授权
            if self.productId != 100:
                self.authgroup()
            # 数字平台获取权限
            if self.productId in [192]:
                self.client()
                self.clientModule()
        return self.Login

class OpenAPI:
    '''
    开放平台登录类
    '''
    def __init__(self,apikey,apisecret,env_conf):
        self.apikey = apikey
        self.apisecret = apisecret
        self.username = env_conf.get("openapi").get("username")
        self.OpenAPIToken = http_requests.HttpRequests(env_conf.get("openapi").get("host"))

    def login(self):
        '''
        登录获取token
        '''
        resource = f"/rs/token/{self.apikey}/{self.apisecret}/{self.username}"
        response = self.OpenAPIToken.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        # 获取到响应的token并更新到header中
        if isinstance(response.get("data"),list):
            self.OpenAPIToken.header.update({"token": response.get("data")[0]})
        else:
            assert False,response.get("source_response") if response.get("source_response") else response.get("Response_text")
        return self.OpenAPIToken

class OpenApiMotorToken:
    '''
    开放平台motor token获取 motor 1.0
    '''
    def __init__(self,token):
        self.token = token

    def getMotorClientTokenUsingGET(self, token):
        '''
        获取访问motor模型的token
        :param item_fixture: item fixture,
        '''
        resource = f'/auth-server/auth/motor/client_token'
        response = token.send_request("GET", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        return response

    def validateToken(self, item_fixture,WebToken):
        '''
        验证token是否有效
        :param item_fixture: item fixture
        '''
        header = {"access_token": WebToken}
        resource = f'/openapi/motor/v1.0/service/uc/auth/validateToken'
        response = item_fixture.send_request("GET", resource, header=header, flush_header=True)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        return response

    def login(self):
        '''
        登录获取token
        '''
        GetToken = self.getMotorClientTokenUsingGET(self.token).get("data")[0]
        self.validateToken(self.token,WebToken=GetToken)
        return self.token

class OpenApiMotorToken_V2:
    '''
    开放平台motor token获取 motor 2.0
    '''
    def __init__(self,token):
        self.token = token

    def getMotorClientTokenUsingGET(self, token):
        '''
        获取访问motor模型的token
        :param item_fixture: item fixture,
        '''
        resource = f'/auth-server/auth/motor/client_token'
        response = token.send_request("GET", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        # 验证token中是否包含epid
        PAYLOAD = json.loads(base_utils.FromBase64(response.get("data")[0].split(".")[1]))
        Assertions.assert_in_key(PAYLOAD,str("epId"))
        return response

    def validateToken(self, item_fixture,WebToken):
        '''
        验证token是否有效
        :param item_fixture: item fixture
        '''
        header = {"access_token": WebToken}
        resource = f'/openapi/rs/motor/v2/service/uc/auth/validateToken'
        response = item_fixture.send_request("GET", resource, header=header, flush_header=True)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response,response.get("code")[0], 200)
        return response

    def login(self):
        '''
        登录获取token
        '''
        GetToken = self.getMotorClientTokenUsingGET(self.token).get("data")[0]
        self.validateToken(self.token,WebToken=GetToken)
        return self.token


class Bimapp:
    '''
    Bimapp 登录类
    '''
    def __init__(self,username,password):
        self.username = base_utils.ToBase64(username)
        self.password = password
        self.token = ""
        self.AcAddress = ""
        self.BimappLogin = http_requests.HttpRequests(Global_Map.get("bimapp").get("host"))

    def getCookie(self):
        '''
        获取cookie
        '''
        resource = "/login.htm"
        response = self.BimappLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)

    def getAcAddress(self):
        '''
        获取ac地址
        '''
        resource = "/getAcAddress.htm"
        response = self.BimappLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        if response.get("Response_text") is not None:
            self.AcAddress = response.get("Response_text")

    def gettoken(self):
        '''
        获取token
        '''
        resource = f"{self.AcAddress}/rs/rest/user/login/{self.username}/{self.password}"
        response = self.BimappLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)
        self.token = response.get('loginToken')[0]

    def doLoginWithToken(self):
        '''
         token登录
        '''
        resource = f"/bimapp/doLoginWithToken.htm?token={self.token}"
        response = self.BimappLogin.send_request("get", resource)
        Assertions.assert_code(response,response.get("status_code"), 200)


    def login(self):
        '''
        登录
        '''
        self.getCookie()
        self.getAcAddress()
        self.gettoken()
        self.doLoginWithToken()
        return self.BimappLogin

class Bussiness:
    '''
    Bussiness 登录类
    '''
    def __init__(self,username,password):
        self.username = username
        self.password = password
        self.BussinessLogin = http_requests.HttpRequests(Global_Map.get("Bussiness").get("host"))

    def login(self):
        '''
        Bussiness 登录
        :param BussinessLogin:
        :return:
        '''
        resource = "/login"
        body = {"username":self.username,"password":self.password}
        response = self.BussinessLogin.send_request("post", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        Assertions.assert_code(response, response.get("rtcode")[0], 0)
        return self.BussinessLogin

class LubanSoft:
    '''
    lubansoft 登录类
    '''
    def __init__(self,username,password):
        self.username = username
        self.password = password
        self.header = Global_Map.get("headers").get("soap_header")
        self.lubansoftLogin = http_requests.HttpRequests(Global_Map.get("lubansoft").get("host"))

    def login(self):
        '''
        lubansoft rest 登录
        :return:
        '''
        resource = "/webservice/clientInfo/LBClient"
        body = '''<?xml version="1.0" encoding="UTF-8"?>
        <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xop="http://www.w3.org/2004/08/xop/include" xmlns:ns1="http://cloudnorm.webservice.lbapp.lubansoft.com/" xmlns:ns10="http://webservice.clientcomponent.lbapp.lubansoft.com/" xmlns:ns11="http://webservice.cloudcomponent.lbapp.lubansoft.com/" xmlns:ns12="http://webservice.lbim.lbapp.lubansoft.com/" xmlns:ns13="http://webservice.common.lbapp.lubansoft.com/" xmlns:ns14="http://webservice.costlib.lbapp.lubansoft.com/" xmlns:ns15="http://webservice.usergrade.lbapp.lubansoft.com/" xmlns:ns16="http://webservice.cloudautoset.lbapp.lubansoft.com/" xmlns:ns17="http://webservice.lbcert.lbapp.lubansoft.com/" xmlns:ns18="http://webservice.clientinfo.lbapp.lubansoft.com/" xmlns:ns19="http://webservice.onlineservice.lbapp.lubansoft.com/" xmlns:ns2="http://lbmsg.webservice.lbapp.lubansoft.com/" xmlns:ns20="http://webservice.localbim.lbapp.lubansoft.com/" xmlns:ns21="http://webservice.adimage.lbapp.lubansoft.com/" xmlns:ns22="http://webservice.banbankDrainage.lbapp.lubansoft.com/" xmlns:ns3="http://upgrade.webservice.lbapp.lubansoft.com/" xmlns:ns4="http://cloudpush.webservice.lbapp.lubansoft.com/" xmlns:ns5="http://common.webservice.lbapp.lubansoft.com/" xmlns:ns6="http://clientInfo.webservice.lbapp.lubansoft.com/" xmlns:ns7="http://validate.webservice.lbapp.lubansoft.com/" xmlns:ns8="http://LBUFS.webservice.lbapp.lubansoft.com/" xmlns:ns9="http://webservice.dataserver.LBUFS.lubansoft.com/">
        <SOAP-ENV:Header><LBTag>Kick</LBTag><LBSessionId></LBSessionId></SOAP-ENV:Header>
        <SOAP-ENV:Body>
        <ns6:login>
        <LBLoginParam>
        <computerName>DESKTOP-S2CJPRR</computerName>
        <hardwareCodes>0d80c194d531820c71de04a3998b435e-4ece03d1c7f03a151b241cbd455505ef</hardwareCodes>
        <intranet_IP>172.16.21.178</intranet_IP>
        <lubanNetVersion>4.9.0.5</lubanNetVersion>
        <password>96e79218965eb72c92a549dd5a330112</password>
        <platform>64</platform>
        <productId>3</productId>
        <softwareEnvironment>hostType=CAD;hostVer=2012;OSName=Windows 10;OSBit=64;OSVer=6-2;</softwareEnvironment>
        <username>hubiao</username>
        <version>30.2.1</version>
        </LBLoginParam>
        </ns6:login></SOAP-ENV:Body></SOAP-ENV:Envelope>'''
        response = self.lubansoftLogin.send_request("post", resource, body)
        Assertions.assert_code(response,response.get("status_code"), 200)
        return self.lubansoftLogin

if __name__ == '__main__':
    pass