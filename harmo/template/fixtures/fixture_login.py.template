# -*- coding: utf-8 -*-
# @Time : 2022-12-4 16:38
# @Author : hubiao
# @Email : 250021520@qq.com
# @File : fixture_login.py
import time

import pytest
from harmo import http_requests
from harmo.base_assert import Assertions

from business import public_login
from harmo.global_map import Global_Map

from swagger.ent_admin_basic_data.ent_admin_basic_data_token_process import EntAdminBasicDataTokenProcess

@pytest.fixture(scope='session')
def token():
    '''
    数据管理平台获取管理员登录凭证
    :return:
    '''
    resule = public_login.Token(username=Global_Map.get('manager').get('username'), password=Global_Map.get('manager').get('password'),deviceType=Global_Map.get('manager').get('deviceType'))
    yield  resule.login()
    if Global_Map.get("difference_marker"):
        resule.logout()
@pytest.fixture(scope='session')
def process_token(token):
    '''
    管理员工作流平台获取登录凭证
    :return:
    '''
    process_token = http_requests.HttpRequests(Global_Map.get("base_url"))
    if Global_Map.get("difference_marker"):
        token_response = EntAdminBasicDataTokenProcess().token_process_get(token)
        Assertions.assert_code(token_response, token_response.get("status_code"), 200)
        Assertions.assert_code(token_response, token_response.get("code")[0], 200)
        process_token.header.update({"access-token": token_response.get("data")[0]})
    yield  process_token

@pytest.fixture(scope='session')
def normal_token():
    '''
    数据管理平台获取普通用户登录凭证
    :return:
    '''
    resule = public_login.Token(username=Global_Map.get('normal').get('username'), password=Global_Map.get('normal').get('password'),deviceType=Global_Map.get('normal').get('deviceType'))
    yield  resule.login()
    if Global_Map.get("difference_marker"):
        resule.logout()
@pytest.fixture(scope='session')
def normal_process_token(normal_token):
    '''
    普通用户工作流平台获取登录凭证
    :return:
    '''
    process_token = http_requests.HttpRequests(Global_Map.get("base_url"))
    if Global_Map.get("difference_marker"):
        token_response = EntAdminBasicDataTokenProcess().token_process_get(normal_token)
        Assertions.assert_code(token_response, token_response.get("status_code"), 200)
        Assertions.assert_code(token_response, token_response.get("code")[0], 200)
        process_token.header.update({"access-token": token_response.get("data")[0]})
    yield  process_token

@pytest.fixture(scope='session')
def no_token():
    '''
    不用token
    :return:
    '''
    resule = http_requests.HttpRequests(Global_Map.get("base_url"))
    yield  resule